const fs = require("fs");
const path = require("path");
const logger = require("../utils/logger");
const nicknamesPath = path.join(__dirname, "../data/nicknames.json");

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
function saveAwards(awards) {
  try {
    fs.writeFileSync(awardsPath, JSON.stringify(awards, null, 2));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥:", err);
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∏–∫–Ω–µ–π–º–æ–≤
function loadNicknames() {
  try {
    if (fs.existsSync(nicknamesPath)) {
      const data = fs.readFileSync(nicknamesPath, "utf8");
      return JSON.parse(data);
    }
    return {};
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∏–∫–Ω–µ–π–º–æ–≤:", err);
    return {};
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–æ–≤
function saveNicknames(nicknames) {
  try {
    fs.writeFileSync(nicknamesPath, JSON.stringify(nicknames, null, 2));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–æ–≤:", err);
  }
}

module.exports = {
  /**
   * Middleware –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ (–∫—Ä–æ–º–µ YouTube –∏ TikTok)
   */
  filterLinks: async (ctx, next) => {
    try {
      if (!ctx.message || !ctx.message.text || ctx.message.from.is_bot) {
        return next();
      }

      try {
        const member = await ctx.getChatMember(ctx.from.id);
        if (member.status === "creator" || member.status === "administrator") {
          return next();
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤:", e);
      }

      const urlRegex = /(https?:\/\/[^\s]+)/g;
      const urls = ctx.message.text.match(urlRegex);

      if (!urls || urls.length === 0) return next();

      const allowedDomains = [
        "youtube.com",
        "youtu.be",
        "tiktok.com",
        "vm.tiktok.com",
      ];

      for (const url of urls) {
        try {
          const domain = new URL(url).hostname.replace("www.", "");
          if (!allowedDomains.some((allowed) => domain.includes(allowed))) {
            await ctx.deleteMessage();
            await ctx.replyWithHTML(
              `‚ùå <b>${ctx.from.first_name}, —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã!</b>\n` +
                `–ú–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ YouTube –∏ TikTok.\n` +
                `–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.`,
            );
            logger.logAction(ctx, `–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π: ${url}`);
            return;
          }
        } catch (e) {
          continue;
        }
      }
      return next();
    } catch (err) {
      logger.logError(err, ctx);
      return next();
    }
  },

  tagAll: async (ctx) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
      const member = await ctx.getChatMember(ctx.from.id);
      if (member.status !== "creator" && member.status !== "administrator") {
        await ctx.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
      const chatId = ctx.chat.id;

      // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
      let mentions = [];
      let processedMembers = 0;
      let limit = 50; // –õ–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∞

      // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–µ—Ç–æ–¥ getChatMembersCount + –∏—Ç–µ—Ä–∞—Ü–∏—è)
      const membersCount = await ctx.getChatMembersCount();

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
      let messageText = "üîî <b>–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n";

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      const args = ctx.message.text.split(" ").slice(1);
      if (args.length > 0) {
        messageText += `<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${args.join(" ")}\n\n`;
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      try {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–µ–±–æ–ª—å—à–∏—Ö —á–∞—Ç–∞—Ö
        const members = await ctx.getChatMembers();
        members.forEach((member) => {
          if (member.status === "member" && member.user.username) {
            mentions.push(`@${member.user.username}`);
          }
        });

        if (mentions.length > 0) {
          messageText += mentions.join(" ");
          await ctx.replyWithHTML(messageText);
        } else {
          await ctx.reply("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.");
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", error);
        await ctx.reply(
          "‚ö†Ô∏è –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        );
      }

      logger.logCommand(ctx, `tagall (${mentions.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)`);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –≤ tagAll:", err);
      logger.logError(err, ctx);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.");
    }
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Discord-—Å–µ—Ä–≤–µ—Ä
   */
  discord: async (ctx) => {
    try {
      const discordLink = "https://discord.gg/STX8mMGN"; // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–£–Æ –°–°–´–õ–ö–£
      await ctx.replyWithHTML(
        `üéÆ <b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Discord —Å–µ—Ä–≤–µ—Ä</b>\n\n` +
          `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É:\n\n` +
          `<b>–°—Å—ã–ª–∫–∞:</b> ${discordLink}\n\n` +
          `<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n` +
          `‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n` +
          `‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n` +
          `‚Ä¢ –ò–≥—Ä–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n` +
          `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n` +
          `–ñ–¥–µ–º –≤–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! üëã`,
      );
      logger.logCommand(ctx, "discord");
    } catch (err) {
      logger.logError(err, ctx);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Discord-—Å—Å—ã–ª–∫–∏.");
    }
  },

  awardUser: async (ctx) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
      const member = await ctx.getChatMember(ctx.from.id);
      if (member.status !== "creator" && member.status !== "administrator") {
        await ctx.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.");
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (!ctx.message.reply_to_message) {
        await ctx.reply(
          "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥–∏—Ç—å.",
        );
        return;
      }

      const targetUser = ctx.message.reply_to_message.from;
      if (targetUser.is_bot) {
        await ctx.reply("‚ùå –ù–µ–ª—å–∑—è –Ω–∞–≥—Ä–∞–¥–∏—Ç—å –±–æ—Ç–∞.");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É (–≤—Å—ë –ø–æ—Å–ª–µ "!–Ω–∞–≥—Ä–∞–¥–∏—Ç—å")
      const reason = ctx.message.text.split(" ").slice(1).join(" ").trim();
      if (!reason) {
        await ctx.reply(
          "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–∞–≥—Ä–∞–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: `!–Ω–∞–≥—Ä–∞–¥–∏—Ç—å –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`",
        );
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
      const awards = loadAwards();
      const chatId = ctx.chat.id.toString();
      const userId = targetUser.id.toString();

      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      if (!awards[chatId]) awards[chatId] = {};
      if (!awards[chatId][userId]) awards[chatId][userId] = [];

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
      awards[chatId][userId].push({
        reason: reason,
        from: ctx.from.first_name,
        date: new Date().toISOString(),
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      saveAwards(awards);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await ctx.reply(
        `üèÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.first_name} –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω!\n` +
          `–ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
      );
      logger.logCommand(ctx, `award ${targetUser.id} for: ${reason}`);
    } catch (err) {
      logger.logError(err, ctx);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –Ω–∞–≥—Ä–∞–¥—ã.");
    }
  },

  /**
   * Add nickname for a user
   */
  addNickname: async (ctx) => {
    try {
      const args = ctx.message.text.split(" ").slice(1);
      const nickname = args.join(" ").trim();

      if (!nickname) {
        await ctx.reply(
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /addname Ice_Vendigo",
        );
        return;
      }

      if (nickname.length > 30) {
        await ctx.reply("–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 30 —Å–∏–º–≤–æ–ª–æ–≤.");
        return;
      }

      const nicknames = loadNicknames();
      const chatId = ctx.chat.id.toString();
      const userId = ctx.from.id.toString();

      if (!nicknames[chatId]) {
        nicknames[chatId] = {};
      }

      nicknames[chatId][userId] = {
        nickname: nickname,
        username: ctx.from.username || null,
        first_name: ctx.from.first_name || null,
        set_at: new Date().toISOString(),
      };

      saveNicknames(nicknames);
      await ctx.reply(`‚úÖ –í–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>${nickname}</b>`, {
        parse_mode: "HTML",
      });
      logger.logCommand(ctx, `addname ${nickname}`);
    } catch (err) {
      logger.logError(err, ctx);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∏–∫–Ω–µ–π–º–∞.");
    }
  },

  showRules: async (ctx) => {
    try {
      const rulesPath = path.join(__dirname, "../config/rules.json");
      const rulesData = fs.readFileSync(rulesPath, "utf8");
      const rules = JSON.parse(rulesData);

      let rulesText = `${rules.title}\n\n`;
      rules.rules.forEach((rule, index) => {
        rulesText += `${index + 1}. ${rule}\n`;
      });
      rulesText += `\n${rules.footer}`;

      await ctx.reply(rulesText);
      logger.logCommand(ctx, "rules");
    } catch (err) {
      logger.logError(err, ctx);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª.");
    }
  },

  showInfo: async (ctx) => {
    try {
      const infoPath = path.join(__dirname, "../config/info.json");
      const infoData = fs.readFileSync(infoPath, "utf8");
      const info = JSON.parse(infoData);

      if (info.infoText) {
        await ctx.reply(info.infoText, { parse_mode: "HTML" });
      } else {
        let infoText = `${info.title}\n\n`;
        info.sections.forEach((section) => {
          infoText += `<b>${section.title}</b>\n`;
          if (section.content) infoText += `${section.content}\n\n`;
          if (section.commands) {
            section.commands.forEach((cmd) => {
              infoText += `${cmd.command} - ${cmd.description}\n`;
            });
            infoText += "\n";
          }
        });
        infoText += info.footer;
        await ctx.reply(infoText, { parse_mode: "HTML" });
      }
      logger.logCommand(ctx, "info");
    } catch (err) {
      logger.logError(err, ctx);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.");
    }
  },

  start: async (ctx) => {
    try {
      if (ctx.chat.type === "private") {
        await ctx.reply(
          "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –∑–∞–¥–∞—á–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
        );
      } else {
        await ctx.reply(
          "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
        );
      }
      logger.logCommand(ctx, "start");
    } catch (err) {
      logger.logError(err, ctx);
    }
  },

  help: async (ctx) => {
    try {
      const helpText =
        "ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b>\n\n" +
        "‚Ä¢ /rules - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã\n" +
        "‚Ä¢ /info - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ\n" +
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n" +
        "‚Ä¢ /names - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤\n" +
        "‚Ä¢ /addname - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫\n" +
        "‚Ä¢ /discord - –°—Å—ã–ª–∫–∞ –Ω–∞ Discord-—Å–µ—Ä–≤–µ—Ä\n\n" +
        "<b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n" +
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏, –∫—Ä–æ–º–µ YouTube –∏ TikTok\n" +
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.";

      await ctx.reply(helpText, { parse_mode: "HTML" });
      logger.logCommand(ctx, "help");
    } catch (err) {
      logger.logError(err, ctx);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–º–æ—â–∏.");
    }
  },

  showNicknames: async (ctx) => {
    try {
      const nicknames = loadNicknames();
      const chatId = ctx.chat.id.toString();

      if (!nicknames[chatId] || Object.keys(nicknames[chatId]).length === 0) {
        await ctx.reply(
          "–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–≤—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–∏–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addname –¢–í–û–ô_–ù–ò–ö",
        );
        return;
      }

      let message = "üéÆ <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤:</b>\n\n";
      const nicknameEntries = Object.entries(nicknames[chatId]);
      nicknameEntries.sort((a, b) =>
        a[1].nickname.localeCompare(b[1].nickname),
      );

      for (const [userId, userData] of nicknameEntries) {
        const { nickname, username, first_name } = userData;
        const displayName = username
          ? `@${username}`
          : first_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
        message += `‚Ä¢ ${displayName}: <b>${nickname}</b>\n`;
      }

      await ctx.reply(message, { parse_mode: "HTML" });
      logger.logCommand(ctx, "names");
    } catch (err) {
      logger.logError(err, ctx);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–æ–≤.");
    }
  },

  muteUser: async (ctx) => {
    try {
      const member = await ctx.getChatMember(ctx.from.id);
      if (member.status !== "creator" && member.status !== "administrator") {
        await ctx.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã.");
        return;
      }

      if (!ctx.message.reply_to_message) {
        await ctx.reply(
          "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å.",
        );
        return;
      }

      const targetUser = ctx.message.reply_to_message.from;
      if (targetUser.is_bot) {
        await ctx.reply("–ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –±–æ—Ç–∞.");
        return;
      }

      const args = ctx.message.text.split(" ").slice(1);
      if (args.length < 1) {
        await ctx.reply("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –º—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /mute 10m)");
        return;
      }

      let muteTime = parseInt(args[0]);
      let timeUnit = args[1] || "min";
      let muteSeconds = 0;

      switch (timeUnit.toLowerCase()) {
        case "sec":
          muteSeconds = muteTime;
          break;
        case "min":
          muteSeconds = muteTime * 60;
          break;
        case "ch":
        case "hour":
        case "hours":
          muteSeconds = muteTime * 3600;
          break;
        default:
          muteSeconds = muteTime * 60;
      }

      if (muteSeconds > 366 * 24 * 3600) muteSeconds = 366 * 24 * 3600;

      await ctx.restrictChatMember(targetUser.id, {
        can_send_messages: false,
        until_date: Math.floor(Date.now() / 1000) + muteSeconds,
      });

      let formattedTime = "";
      if (muteSeconds < 60) formattedTime = `${muteSeconds} —Å–µ–∫—É–Ω–¥`;
      else if (muteSeconds < 3600)
        formattedTime = `${Math.floor(muteSeconds / 60)} –º–∏–Ω—É—Ç`;
      else if (muteSeconds < 86400)
        formattedTime = `${Math.floor(muteSeconds / 3600)} —á–∞—Å–æ–≤`;
      else formattedTime = `${Math.floor(muteSeconds / 86400)} –¥–Ω–µ–π`;

      await ctx.reply(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.username ? "@" + targetUser.username : targetUser.first_name} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ ${formattedTime}.`,
      );
      logger.logCommand(
        ctx,
        `mute ${targetUser.username || targetUser.id} for ${formattedTime}`,
      );
    } catch (err) {
      logger.logError(err, ctx);
      await ctx.reply(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.",
      );
    }
  },

  unmuteUser: async (ctx) => {
    try {
      const member = await ctx.getChatMember(ctx.from.id);
      if (member.status !== "creator" && member.status !== "administrator") {
        await ctx.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã.");
        return;
      }

      if (!ctx.message.reply_to_message) {
        await ctx.reply(
          "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å.",
        );
        return;
      }

      const targetUser = ctx.message.reply_to_message.from;
      await ctx.restrictChatMember(targetUser.id, {
        can_send_messages: true,
        can_send_media_messages: true,
        can_send_other_messages: true,
        can_add_web_page_previews: true,
      });

      await ctx.reply(
        `–ú—É—Ç —Å–Ω—è—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.username ? "@" + targetUser.username : targetUser.first_name}.`,
      );
      logger.logCommand(ctx, `unmute ${targetUser.username || targetUser.id}`);
    } catch (err) {
      logger.logError(err, ctx);
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –º—É—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.");
    }
  },

  kickUser: async (ctx) => {
    try {
      const member = await ctx.getChatMember(ctx.from.id);
      if (member.status !== "creator" && member.status !== "administrator") {
        await ctx.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã.");
        return;
      }

      if (!ctx.message.reply_to_message) {
        await ctx.reply(
          "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å.",
        );
        return;
      }

      const targetUser = ctx.message.reply_to_message.from;
      const reason =
        ctx.message.text.split(" ").slice(1).join(" ") ||
        "–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã";

      await ctx.kickChatMember(targetUser.id);
      await ctx.unbanChatMember(targetUser.id);

      await ctx.reply(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.username ? "@" + targetUser.username : targetUser.first_name} –∏—Å–∫–ª—é—á–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
      );
      logger.logCommand(
        ctx,
        `kick ${targetUser.username || targetUser.id} (${reason})`,
      );
    } catch (err) {
      logger.logError(err, ctx);
      await ctx.reply(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.",
      );
    }
  },
};
